[project]
name = "fotix"
version = "0.1.0"
description = "Fotix: Ferramenta para encontrar e gerenciar arquivos duplicados."
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment",
    "Topic :: System :: Filesystems",
    "Topic :: Utilities",
    "Typing :: Typed",
]

dependencies = [
    "pydantic>=2.0,<3.0",
    "pydantic-settings>=2.0,<3.0",
    # Outras dependências principais da aplicação virão aqui no futuro:
    # "send2trash>=1.8,<2.0",
    # "PySide6>=6.0,<7.0",
    # "blake3>=0.3,<0.4", 
    # "stream-unzip>=0.0.5,<0.1.0" 
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0,<9.0",
    "pytest-cov>=4.0,<6.0", # Para cobertura de testes
    "pytest-mock>=3.0,<4.0", # Embora unittest.mock seja usado, pode ser útil
    "mypy>=1.0,<2.0",       # Para checagem de tipos estática
    "ruff>=0.1,<0.5",        # Linter e formatter rápido
]

[project.urls]
"Homepage" = "https://github.com/seu_usuario/fotix" # Substituir pelo URL real
"Bug Tracker" = "https://github.com/seu_usuario/fotix/issues" # Substituir

# Configuração para Ruff (linter e formatter)
[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "UP", "C90", "N", "D", "S", "ANN", "ASYNC", "B", "A", "COM", "LOG", "Q", "PT", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "ISC"]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "ANN101", # Missing type hint for self in method
    "ANN102", # Missing type hint for cls in classmethod
    "S101", # Use of assert detected
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"

# Configuração para Pytest
[tool.pytest.ini_options]
pythonpath = ["src"]
minversion = "7.0"
addopts = "-ra -q --cov=src/fotix --cov-report=term-missing --cov-report=xml"
testpaths = [
    "tests",
]

# Configuração para Mypy
[tool.mypy]
python_version = "3.10"
warnings = true
pretty = true
show_column_numbers = true
show_error_codes = true

# Segue a configuração do Ruff para strictness, mas pode ser ajustada
strict = true 

# Para permitir bibliotecas sem types (se necessário, mas Pydantic tem)
# [[tool.mypy.overrides]]
# module = [
#     "pydantic_settings.*"
# ]
# ignore_missing_imports = true

# Configuração para Coverage.py (usado pelo pytest-cov)
[tool.coverage.run]
source = ["src/fotix"]
branch = true
omit = [
    "src/fotix/__main__.py", # Se existir um __main__.py que apenas chama a UI
    "*/__init__.py", # Geralmente não há lógica testável em __init__s simples
    "tests/*",
    "*/migrations/*",
]

[tool.coverage.report]
show_missing = true
fail_under = 80 # Definir uma meta de cobertura mínima (ex: 80%)

[tool.coverage.xml]
output = "coverage.xml"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

# Se você planeja ter scripts de console:
# [project.scripts]
# fotix = "fotix.main:run_app" # Exemplo, se fotix.main.run_app for o entrypoint 